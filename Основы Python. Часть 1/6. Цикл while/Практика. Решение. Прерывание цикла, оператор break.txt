# Задача 1. Бегать — это полезно
#
# Представим, что у нас далёкое будущее и мы можем заниматься спортом на планетах со странными перепадами температур.
# Спортсмен бегает по стадиону до тех пор, пока температура на улице больше 15 градусов. Он пробегает 20 метров,
# затем температура падает на два градуса, и, если уже в этот момент она стала меньше либо равна 15 градусам,
# спорт сразу заканчивается. Если же всё в порядке, то он проходит пешком ещё 10 метров. Затем всё это повторяется.
#
# Напишите программу, которая спрашивает у пользователя, сколько на улице градусов, и, исходя из погоды,
# считает количество пройденных по стадиону метров и выводит ответ на экран.
#
#
#

temperature = int(input("Введите температуру: "))
distance = 0
while temperature > 15:
    distance += 20
    temperature -= 2
    if temperature <= 15:
        break
    distance += 10

print(distance)

# Задача 2. Расшифровка кода
#
# Нам нужно расшифровать определённый код в виде одного большого числа. Для этого нужно посчитать сумму цифр справа налево.
# Если мы встречаем в числе цифру 5, то выводим сообщение «Обнаружен разрыв» и заканчиваем считать сумму.
# В конце программы на экран выводится сумма тех цифр, которые мы взяли.
#
#
#

numbers = int(input("Введите число: "))
summ_of_numbers = 0
while numbers != 0:
    last_number = numbers % 10
    if last_number == 5:
        print("Обнаружен разрыв")
        break
    summ_of_numbers += last_number
    numbers //= 10

print(summ_of_numbers)


# Задача 3. Начальная школа
#
# Авторы учебника по математике для второклассников очень любят всё усложнять.
# Например, отрицательные числа изучают только в пятом классе,
# а они всё норовят дать задачки на них во втором классе. Нам нужна программа, которая будет проверять,
# что в учебнике для второклашек не будет отрицательных чисел.
#
# Напишите программу, которая считывает числа до тех пор, пока не встретит отрицательное число.
# При появлении отрицательного числа программа завершается и показывает количество введенных чисел.
# Подумайте, обязательно ли здесь использовать оператор break.

# С break:
current_number = 0
count = 0
while True:
    current_number = int(input("Введите число: "))
    if current_number < 0:
        print("Найдено отрицательное число!")
        print("Введённых чисел, не учитывая отрицательное = ", count)
        break
    count += 1

# Без break:
current_number = 0
count = 0
while current_number >= 0:
    current_number = int(input("Введите число: "))
    count += 1
print("Найдено отрицательное число!")
print("Введённых чисел, не учитывая отрицательное = ", count - 1)


# Задача 4. Ставки приняты, ставок больше нет
#
# Костя опять за старое! Только теперь он играет в кубики более надёжно, то есть на какую-то фиксированную сумму.
# И при этом пока что постоянно выигрывает! Однако по правилам это не мешает ему проиграть сразу всё.
#
# Напишите программу, которая запрашивает у пользователя начальное количество денег и, пока оно меньше 10 000,
# запрашивает число, которое выпало на кубике (от 1 до 6). Если на кубике выпало 3, то выводится сообщение «Вы проиграли всё!»,
# и деньги обнуляются. Если выпало другое число, к сумме прибавляется 500.
#
#
#
# Пример:
#
# Введите стартовую сумму: 5000
#
# Сколько выпало на кубике? 4
#
# Выиграли 500 рублей!
#
# Сколько выпало на кубике? 5
#
# Выиграли 500 рублей!
#
# Сколько выпало на кубике? 3
#
# Вы проиграли всё!
#
# Игра закончена.
#
# Итого осталось: 0 рублей
#
#
#
# Пример 2:
#
# Введите стартовую сумму: 9700
#
# Сколько выпало на кубике? 4
#
# Выиграли 500 рублей!
#
# Игра закончена.
#
# Итого осталось: 10200 рублей

start_money = int(input("Введите стартовую сумму: "))

while start_money < 10000:
    random_cube = int(input("Сколько выпало на кубике? "))
    if random_cube == 3:
        print("Вы проиграли всё!")
        start_money = 0
        break
    start_money += 500
    print("Выиграли 500 рублей!")

print("Игра закончена.\nИтого осталось:", start_money)
# \n - символ перехода на новую строку, его можно использовать чтобы перенести часть строки на новую строку при выводе в консоль.
