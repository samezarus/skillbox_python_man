# Задача 1. Возможности компьютера
#
# В одной IT-компании тестируют возможности различных языков программирования, компиляторов и, конечно же, компьютеров.
# Компания дала вам задачу понять, какое самое маленькое возможное число можно получить путём постоянного деления числа на 2.
# Изначально число равно единице. Также, помимо самого числа, компания просит вывести количество делений. Реализуйте такую программу.
#
#
#

number = 1
count = 0
save_number = number
while number:
    save_number = number
    number /= 2
    count += 1

print(save_number, count)

# Задача 2. Тестирование
#
# Команде программистов отдали на тестирование новую модель суперкомпьютера. Для начала программисты решили проверить,
# как у компьютера обстоят дела с вычислениями вещественных чисел. Разработчики компьютера предупредили,
# что на входе он работает только с экспоненциальной формой числа.
#
# Пользователь вводит число N в экспоненциальной форме, где мантисса всегда равна числу от 1 до 9, а порядок меньше нуля.
# Также есть переменная Х, которая изначально равна единице. Посчитайте, сколько раз нужно прибавить N к Х, чтобы оно перевалило за двойку.
#
# Дополнительно: обеспечьте контроль ввода.
#
#
#
# Пример 1:
#
# Введите число в эксп. форме: 1e-3
#
# Кол-во прибавлений: 1001
#
#
#
# Пример 2:
#
# Введите число в эксп. форме: 5.02e-1
#
# Кол-во прибавлений: 2
#
#
#

# Дополнительная часть с контролем ввода:
# 1) в целом самый простой контроль ввода - это функция float(), которая применяется к input(). Это уже защитит нас от ввода некорректных
# символов
# 2) При желании мы можем усложить контроль ввода и добавить проверки мантиссы и порядка:

while True:
    # Если мы хотим проверить мантиссу - то нам нужно работать с числом как со строкой, поэтому float к input добавлять пока не будем
    delta = input("Введите число в эксп. форме ")
    # проверка, что мантисса равна числу от 1 до 9
    # сперва получим отдельно часть строки до символа 'e'
    mantissa = ''
    for cipher in delta:
        if cipher == 'e':
            break
        mantissa += cipher
    # получив мантиссу - мы можем проверить, что она удовлетворяет условию (равна числу от 1 до 9)
    # так же мы сразу можем добавить проверку порядка - если порядок отрицательный, то введенное число будет меньше 1, это мы и проверим:
    if 1 <= float(mantissa) <= 9 and float(delta) < 1:
        print('Число введено верно!')
        delta = float(delta)
        break
    else:
        print("Число введено с ошибкой, мантисса всегда должна быть равна числу от 1 до 9, а порядок должен быть меньше нуля")


start_number = 1
count = 0
while start_number <= 2:
    start_number += delta
    count += 1

print("Кол-во прибавлений: ", count)

# Задача 3. Урок информатики
#
# На одном из уроков информатики учитель объяснял тему «Числа с плавающей точкой», но несколько учеников никак не могли понять,
# почему эта точка «плавает» и как вообще выглядят числа в такой форме. Для наглядности учитель написал программу,
# которая берёт число больше десяти и выводит его в формате плавающей точки.
#
# Пользователь вводит положительное число x (x > 10). Напишите функцию, которая выводит его в формате плавающей точки,
# то есть x = a *10 ** b, где 1 ≤ a < 10.
#
#
#
# Пример 1:
#
# Введите число: 16
#
# Формат плавающей точки: x = 1.6 * 10 ** 1
#
#
#
# Пример 2:
#
# Введите число: 92345
#
# Формат плавающей точки: x = 9.2345 * 10 ** 4

start_number = float(input("Введите число: "))
count = 0
while start_number > 10:
    count += 1
    start_number /= 10

print(f"Формат плавающей точки: x = {start_number} * 10 ** {count}")
