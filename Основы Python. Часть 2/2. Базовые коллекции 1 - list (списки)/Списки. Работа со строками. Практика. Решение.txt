# Задача 1. Текстовый редактор: возвращение
#
# Мы продолжаем участвовать в разработке нового текстового редактора и делать жизнь обычных пользователей чуть лучше.
# В этот раз у нас стоит задача сделать фишку с поиском и заменой символов в выделенной строчке.
# Например, человек что-то перечислял в тексте, но ошибся и вместо точек с запятой использовал двоеточия. Лингвисты негодуют.
#
#
#
# Пользователь вводит строку S. Напишите программу, которая заменяет в строке все двоеточия (:) на точки с запятой (;).
# Также подсчитайте количество замен и выведите ответ на экран (и новую строку тоже). Для решения используйте список.
#
#
#
# Пример:
#
# Введите строку: гвозди:шурупы:гайки
#
#
#
# Исправленная строка: гвозди;шурупы;гайки
#
# Кол-во замен: 2
#

user_msg = input("Введите строку: ")
letters = list(user_msg)
what_replace = ":"
for_what_replace = ";"
index = 0
replace_count = 0
for letter in letters:
    if letter == what_replace:
        letters[index] = for_what_replace
        replace_count += 1
    index += 1

print("Исправленная строка:", end=' ')
for letter in letters:
    print(letter, end='')

print("Кол-во замен:", replace_count)

# Аналогичное решение при помощи функции enumerate:

user_msg = input("Введите строку: ")
letters = list(user_msg)
what_replace = ":"
for_what_replace = ";"
for index, letter in enumerate(letters):
    if letter == what_replace:
        letters[index] = for_what_replace

for letter in letters:
    print(letter, end='')

# Задача 2. Соседи
#
# Дана строка S и номер позиции символа в строке. Напишите программу, которая выводит соседей этого символа и сообщение
# о количестве таких же символов среди этих соседей: их нет, есть ровно один или есть два таких же.
#
#
#
# Пример 1:
#
# Введите строку: abbc
#
# Номер символа: 3
#
#
#
# Символ слева: b
#
# Символ справа: c
#
#
#
# Есть ровно один такой же символ.
#
#
#
# Пример 2:
#
# Введите строку: abсd
#
# Номер символа: 3
#
#
#
# Символ слева: b
#
# Символ справа: d
#
#
#
# Таких же символов нет.
#
#
#

msg = input("Введите строку: ")
index_of_letter = int(input("Номер символа: ")) - 1  # сразу отнимаем 1, чтобы превратить номер в индекс
letters = list(msg)
count = 0
if index_of_letter > 0:
    print("Символ слева:", letters[index_of_letter - 1])
    if letters[index_of_letter - 1] == letters[index_of_letter]:
        count += 1
if index_of_letter < len(letters) - 1:
    print("Символ справа:", letters[index_of_letter + 1])
    if letters[index_of_letter + 1] == letters[index_of_letter]:
        count += 1

if count == 0:
    print("Таких же символов нет.")
elif count == 1:
    print("Есть ровно один такой же символ.")
elif count == 2:
    print("Таких символов два.")

# Задача 3. Улучшенная лингвистика
#
# Мы уже писали программу для лингвистов, которая считала количество определённых букв в тексте.
# Теперь эту программу нужно улучшить. Есть список из трёх слов, которые вводит пользователь.
# Затем вводится сам текст произведения строго по словам. Текст вводится до тех пор, пока не встретится слово end.
# Напишите программу, которая посчитает, сколько раз слова пользователя встречаются в тексте.
#
#
#
# Пример:
#
# Введите 1 слово: я
#
# Введите 2 слово: год
#
# Введите 3 слово: лучший
#
#
#
# Слово из текста: этот
#
# Слово из текста: год
#
# Слово из текста: -
#
# Слово из текста: лучший
#
# Слово из текста: год
#
#
#
# Подсчёт слов в тексте
#
# я: 0
#
# год: 2
#
# лучший: 1

words_list = []
counts = [0, 0, 0]

for i in range(3):
    print("Введите", i + 1, "слово", end=' ')
    word = input()
    words_list.append(word)

text = input("Слово из текста: ")
while text != "end":
    for index in range(3):
        if words_list[index] == text:
            counts[index] += 1
    text = input("Слово из текста: ")

print("Подсчёт слов в тексте")
for i in range(3):
    print(words_list[i], ':', counts[i])
