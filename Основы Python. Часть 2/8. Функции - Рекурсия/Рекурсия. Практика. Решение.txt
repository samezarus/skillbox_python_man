# Задача 1. Challenge
#
# Обычно программисты любят, когда всё просто и понятно. Но Антон не из таких.
# Он любит устраивать себе челлендж, развиваться и сразу применять на практике то, что только что узнал.
# И в этот раз он подумал реализовать подсчёт факториала без использования циклов.
#
#
#
# Напишите функцию, которая считает факториал числа с помощью рекурсии.
#
#
#
# Кстати, в Python есть ограничение на количество рекурсивных вызовов.
# Попробуйте передать своей функции, например, число 1000 и посмотрите, что будет.
#
#
#
import math


def rec_factorial(number):
    if number <= 1:
        return 1
    else:
        return number * rec_factorial(number - 1)


n = 10
print(rec_factorial(n), math.factorial(n), rec_factorial(n) == math.factorial(n))


# Задача 2. Степень числа
#
# На одном из форумов, посвящённых программированию, пользователь выложил такой код для расчёта степени
# числа без использования циклов, ** и функции math.pow():
#
#
#
# def power(a, n):
#
#     return a * power(a, n)
#
#
#
#
#
# float_num = float(input('Введите вещественное число: '))
#
# int_num = int(input('Введите степень числа: '))
#
# print(float_num, '**', int_num, '=', power(float_num, int_num))
#
#
#
# Другие пользователи отметили, что это решение нерабочее и в нём есть ошибки.
# Исправьте это решение, не используя циклы, возведение в степень через ** и функцию math.pow()
#
#
#
# Правильный результат:
#
# Введите вещественное число: 1.5
#
# Введите степень числа: 5
#
# 1.5 ** 5 = 7.59375
#
#
#

def power(a, n):
    if n <= 0:
        return 1
    return a * power(a, n - 1)


float_num = float(input('Введите вещественное число: '))

int_num = int(input('Введите степень числа: '))

print(float_num, '**', int_num, '=', power(float_num, int_num))


# Задача 3. Поиск элемента
#
# Когда мы работаем с большой многоуровневой структурой, нам нередко необходимо пройтись по ней и найти нужный элемент.
# Для этого в программировании используются специальные алгоритмы поиска.
#
# Напишите функцию, которая находит заданный пользователем ключ в словаре и выдаёт значение этого ключа на экран.
# В качестве примера можно использовать такой словарь:
#
#
#
# site = {
#
#     'html': {
#
#         'head': {
#
#             'title': 'Мой сайт'
#
#         },
#
#         'body': {
#
#             'h2': 'Здесь будет мой заголовок',
#
#             'div': 'Тут, наверное, какой-то блок',
#
#             'p': 'А вот здесь новый абзац'
#
#         }
#
#     }
#
# }
#
#
#
# Пример 1:
#
# Искомый ключ: h2
#
#
#
# Значение: Здесь будет мой заголовок
#
#
#
# Пример 2:
#
# Искомый ключ: abc
#
#
#
# Такого ключа в структуре сайта нет.

def search_element(data, tag):
    result = None
    if tag in data:
        return data[tag]
    for key, value in data.items():
        if isinstance(value, dict):
            result = search_element(value, tag)
            if result:
                return result
    return result


site = {
    'html': {
        'head': {
            'title': 'Мой сайт'
        },
        'body': {
            'h2': 'Здесь будет мой заголовок',
            'div': 'Тут, наверное, какой-то блок',
            'p': 'А вот здесь новый абзац'
        }
    }
}

search_key = input("Искомый ключ: ")

value = search_element(site, search_key)
if value:
    print("Значение:", value)
else:
    print("Такого ключа в структуре сайта нет.")
