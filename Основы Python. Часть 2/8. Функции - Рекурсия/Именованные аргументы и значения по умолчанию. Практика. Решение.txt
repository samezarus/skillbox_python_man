# Задача 1. Работа с файлом
#
# Вы пишете небольшое приложение для работы с файлами. Реализуйте функцию, которая может принимать на вход три аргумента:
# вопрос пользователю (на который нужно ответить да или нет), сообщение о неправильном вводе и количество попыток.
# Вопрос — обязательный позиционный аргумент, остальные — со значениями по умолчанию. При корректном ответе функция может возвращать
# что угодно — например, число 1 при ответе «да» или 0 при ответе «нет».
#
#
#
# В основной программе вызовите функцию минимум три раза: только с вопросом, с вопросом и сообщением об ошибке,
# с вопросом и количеством попыток.
#
#
#
# Пример работы программы:
#
# Вы действительно хотите выйти? что
#
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
#
# Осталось попыток: 3
#
# Вы действительно хотите выйти? да
#
# Удалить файл? не знаю
#
# Так удалить или нет?
#
# Осталось попыток: 3
#
# Удалить файл? нет
#
# Записать файл? ага
#
# Неверный ввод. Пожалуйста, введите 'да' или 'нет'.
#
# Осталось попыток: 1
#
# Записать файл? да
#
#
#

def checker(question,
            error_message="Неверный ввод. Пожалуйста, введите 'да' или 'нет'.",
            count_of_errors=3):
    while count_of_errors:
        user_input = input(question)
        if user_input.lower() == "да":
            return 1
        elif user_input.lower() == "нет":
            return 0
        else:
            print(error_message)
        count_of_errors -= 1
        print("Осталось попыток:", count_of_errors)


# checker("да?")
# checker("да?", "ДА ил НЕТ?!")
# checker("да?", count_of_errors=3)

# Задача 2. Накопление значений
#
# При работе со значениями по умолчанию и изменяемыми типами данных нужно знать и остерегаться ещё одной интересной штуки.
#
#
#
# Напишите функцию с двумя аргументами: первый — число num, позиционный аргумент; второй — список lst, по умолчанию он пустой.
# В теле функции в список добавляется число num и сам список выводится на экран.
#
#
#
# В основной программе вызовите функции три раза только с одним аргументом (числом), например так:
#
# add_num(5)
#
# add_num(10)
#
# add_num(15)
#
#
#
# И посмотрите, что произойдёт.
#
#
#
# После этого сделайте значение lst по умолчанию None и поправьте функцию, чтобы она работала правильно.
#
#
#

def add_num(num, nums=[]):
    nums.append(num)
    print(nums)


add_num(5)

add_num(10)

add_num(15)


def add_num(num, nums=None):
    nums = nums or []
    # хитрая конструкция, которая позволит упростить ввод:
    # if not nums:
    #    nums = []
    # Первый вариант будет выбран, если nums не равен None, иначе будет создан и записан пустой список
    nums.append(num)
    print(nums)


add_num(5)

add_num(10)

add_num(15)


# Задача 3. Помощь другу
#
# Нашего друга попросили написать функцию, которая на вход принимает список всякого мусора.
# Ему нужно подготовить из этого списка список словарей, чтобы его коллеги смогли дальше продолжить обработку данных.
# Вот список правил, что нужно сделать с изначальным списком:
#
# Если в списке встретился словарь, то оставляем его.
#
# Если в списке встретилась строка, то из неё нужно сделать словарь и положить его в итоговый список, например  “abc” → {“abc”: “abc”}.
#
# С числами нужно сделать то же самое, что и со строками.
#
# Всё остальное выкидываем из нашего списка.
#
#
#
# Друг написал программу, но в ней ошибка, так как она что-то не то выводит :( Нужна ваша помощь, вот сама программа:
#
#
#
# def create_dict(data, template=dict()):
#
#     if isinstance(data, dict):
#
#         return data
#
#     if isinstance(data, int) or isinstance(data, float) or isinstance(data, str):
#
#         return template[data] = data
#
#
#
# def data_preparation(old_list):
#
#     new_list = []
#
#     for i_element in old_list:
#
#         new_list.append(create_dict(i_element))
#
#     return new_list
#
#
#
# data = [“sad”, {“sds”: 23}, {43}, [12, 42, 1], 2323]
#
# data = data_preparation(data)
#
# print(data)
#
#
#
# Исправьте программу и убедитесь, что всё работает верно.

def create_dict(data, template=None):
    if isinstance(data, dict):
        return data
    elif isinstance(data, (int, float, str)):
        template = template or dict()
        template[data] = data
        return template
    else:
        return None


def data_preparation(old_list):
    new_list = []
    for i_element in old_list:
        new_elem = create_dict(i_element)
        if new_elem:
            new_list.append(new_elem)
    return new_list


data = ["sad", {"sds": 23}, {43}, [12, 42, 1], 2323]
data = data_preparation(data)
print(data)
