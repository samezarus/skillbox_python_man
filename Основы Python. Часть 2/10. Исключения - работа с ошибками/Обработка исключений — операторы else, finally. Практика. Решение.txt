# Задача 1. Простая программа
#
# Напишите программу, которая открывает файл и записывает туда введённую пользователем строку.
# Используйте операторы try except else finally. Обработайте возможные ошибки:
#
# Проблема при открытии файла.
# Нельзя преобразовать данные в целое.
# Неожиданная ошибка.
#
#
import os

file = None
try:
    file = open("23.3.txt", "w", encoding="utf8")
    number = int(input("Введите текст: "))
    file.write(str(number))
except (FileNotFoundError, PermissionError) as exc:
    print(type(exc), exc)
except ValueError as exc:
    print(type(exc), exc)
except Exception as exc:
    print(type(exc), exc)
else:
    print("Запись прошла без ошибок")
finally:
    if file and not file.closed:
        file.close()


# Задача 2. Старая задача
#
# Возьмите любую задачу из практической работы, например, предыдущего модуля и оформите её решение
# в виде try except finally (можно ещё и else), обрабатывая возможные ошибки.
#
# Посмотрев на то, что получилось, попробуйте ответить себе на такой вопрос:
# когда стоит использовать обработку исключений и когда она будет излишней?

def find_file(cur_path, file_name):
    for i_elem in os.listdir(cur_path):
        path = os.path.join(cur_path, i_elem)
        if file_name == i_elem:
            print(os.path.abspath(path))
        elif os.path.isdir(path):
            result = find_file(path, file_name)
            if result:
                break
    else:
        result = None

    return result


try:
    find_file('c:\\', 'hel')
except (TypeError, PermissionError) as exc:
    print(exc, type(exc))

# Хоть проверка исключений и является мощным инструментом, НО отдавать предпочтение нужно простым проверкам (избежать исключения лучше)
# Если же мы не уверены в появлении ошибки (например у нас нет власти над источником ошибки - это может быть какой-то сторонний сервис)
# И если простая проверка не поможет учесть все варианты - мы можем использовать исключения.
# НО даже в этом случае, старайтесь разделять исключения, которые вы выбрасываете специально и исключения которые могут появиться случайно.
# Причина такой осторожности в том, что мы можем запутаться и поймать например исключение, о котором мы не догадывались. А если мы его
# поймаем и не увидим - мы можем пропустить ошибку в нашем коде.

