# Задача 1. Координаты точки
#
# В одной из практик предыдущего модуля была задача на реализацию класса «Точка».
# Модернизируйте класс по следующему условию: объект «Точка» на плоскости имеет координаты x и y;
# при создании новой точки могут передаваться пользовательские значения координат, по умолчанию x = 0, y = 0.
#
#
#
# Реализуйте класс, который будет представлять эту точку, и напишите следующие методы:
#
# Предоставление информации о точке (используйте магический метод str).
# Геттер и сеттер для x.
# Геттер и сеттер для y.
# Для сеттеров реализуйте проверку на корректность входных данных: координаты должны быть числом.
#
#
#

class Point:
    count = 0

    def __init__(self, x=0, y=0):
        self.__x = x
        self.__y = y
        Point.count += 1

    def __str__(self):
        return f"({self.__x}, {self.__y})"

    def get_x(self):
        return self.__x

    def get_y(self):
        return self.__y

    def check_value(self, value):
        if isinstance(value, str) and value.isdigit():
            value = float(value)
        if isinstance(value, (int, float)):
            return value
        return None

    def set_x(self, value):
        checker_value = self.check_value(value)
        if checker_value:
            self.__x = checker_value

    def set_y(self, value):
        checker_value = self.check_value(value)
        if checker_value:
            self.__y = checker_value


# Задача 2. Человек
#
# Реализуйте класс «Человек», который инициализируется именем (имя должно состоять только из букв)
# и возрастом (должен быть в диапазоне от 0 до 100), а внутри класса считается общее количество инициализированных объектов.
# Реализуйте сокрытие данных для всех атрибутов (как статических, так и динамических),
# а для изменения и получения данных объекта напишите специальные геттеры и сеттеры.
#
# При тестировании класса измените приватный атрибут (например, возраст) двумя способами:
# сеттером и «крайне не рекомендуемым», который был показан в видео.

class Human:
    count = 0

    def __init__(self, name, age):
        self.__name = ''
        self.__age = 0
        self.set_age(age)
        self.set_name(name)

        Human.count += 1

    def set_age(self, value):
        if isinstance(value, (int, float)) and 0 <= value <= 100:
            self.__age = value
        else:
            raise ValueError("Ошибка в возрасте")

    def set_name(self, value):
        if isinstance(value, str) and value.isalpha():
            self.__name = value
        else:
            raise ValueError("Ошибка в имени")

    def get_name(self):
        return self.__name

    def get_age(self):
        return self.__age


human = Human('helo', 100)  # значения передадутся в сеттер
human._Human__age = 99  # «крайне не рекомендуемый» метод
